var cov_2o8o3pdy23=function(){var path="/Users/LukaBontempi/bootcamp/collab/skylab-bootcamp-201909/staff/luka-bontempi/affinity/affinity-api/logic/filtercandidates/index.spec.js";var hash="149f896237e959aef33a62e121d57ce12dda1441";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/LukaBontempi/bootcamp/collab/skylab-bootcamp-201909/staff/luka-bontempi/affinity/affinity-api/logic/filtercandidates/index.spec.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:26}},"1":{start:{line:2,column:33},end:{line:2,column:40}},"2":{start:{line:3,column:19},end:{line:3,column:34}},"3":{start:{line:4,column:19},end:{line:4,column:23}},"4":{start:{line:5,column:25},end:{line:5,column:37}},"5":{start:{line:6,column:38},end:{line:6,column:62}},"6":{start:{line:7,column:39},end:{line:7,column:63}},"7":{start:{line:10,column:0},end:{line:127,column:2}},"8":{start:{line:11,column:4},end:{line:11,column:47}},"9":{start:{line:11,column:17},end:{line:11,column:46}},"10":{start:{line:16,column:4},end:{line:94,column:6}},"11":{start:{line:17,column:8},end:{line:17,column:39}},"12":{start:{line:18,column:8},end:{line:18,column:39}},"13":{start:{line:19,column:8},end:{line:19,column:44}},"14":{start:{line:20,column:8},end:{line:20,column:41}},"15":{start:{line:21,column:8},end:{line:21,column:41}},"16":{start:{line:22,column:8},end:{line:22,column:41}},"17":{start:{line:23,column:8},end:{line:23,column:130}},"18":{start:{line:24,column:8},end:{line:24,column:47}},"19":{start:{line:25,column:8},end:{line:25,column:28}},"20":{start:{line:26,column:8},end:{line:26,column:20}},"21":{start:{line:29,column:8},end:{line:29,column:51}},"22":{start:{line:31,column:8},end:{line:31,column:31}},"23":{start:{line:33,column:23},end:{line:33,column:194}},"24":{start:{line:36,column:8},end:{line:36,column:41}},"25":{start:{line:37,column:8},end:{line:37,column:25}},"26":{start:{line:39,column:8},end:{line:39,column:20}},"27":{start:{line:40,column:8},end:{line:40,column:18}},"28":{start:{line:41,column:8},end:{line:41,column:21}},"29":{start:{line:42,column:8},end:{line:42,column:19}},"30":{start:{line:43,column:8},end:{line:43,column:22}},"31":{start:{line:44,column:8},end:{line:44,column:22}},"32":{start:{line:45,column:8},end:{line:45,column:22}},"33":{start:{line:46,column:8},end:{line:46,column:23}},"34":{start:{line:47,column:8},end:{line:47,column:25}},"35":{start:{line:48,column:8},end:{line:48,column:23}},"36":{start:{line:49,column:8},end:{line:49,column:22}},"37":{start:{line:50,column:8},end:{line:50,column:21}},"38":{start:{line:52,column:8},end:{line:52,column:23}},"39":{start:{line:54,column:8},end:{line:85,column:9}},"40":{start:{line:54,column:21},end:{line:54,column:22}},"41":{start:{line:56,column:12},end:{line:56,column:55}},"42":{start:{line:59,column:25},end:{line:71,column:13}},"43":{start:{line:74,column:12},end:{line:74,column:33}},"44":{start:{line:75,column:12},end:{line:75,column:39}},"45":{start:{line:76,column:12},end:{line:76,column:35}},"46":{start:{line:77,column:12},end:{line:77,column:41}},"47":{start:{line:78,column:12},end:{line:78,column:41}},"48":{start:{line:79,column:12},end:{line:79,column:41}},"49":{start:{line:80,column:12},end:{line:80,column:43}},"50":{start:{line:81,column:12},end:{line:81,column:47}},"51":{start:{line:82,column:12},end:{line:82,column:43}},"52":{start:{line:83,column:12},end:{line:83,column:41}},"53":{start:{line:84,column:12},end:{line:84,column:38}},"54":{start:{line:86,column:8},end:{line:86,column:16}},"55":{start:{line:88,column:8},end:{line:88,column:41}},"56":{start:{line:96,column:4},end:{line:106,column:6}},"57":{start:{line:96,column:78},end:{line:96,column:86}},"58":{start:{line:98,column:31},end:{line:98,column:73}},"59":{start:{line:100,column:8},end:{line:100,column:39}},"60":{start:{line:101,column:8},end:{line:101,column:48}},"61":{start:{line:102,column:8},end:{line:102,column:63}},"62":{start:{line:103,column:8},end:{line:103,column:71}},"63":{start:{line:103,column:39},end:{line:103,column:70}},"64":{start:{line:126,column:4},end:{line:126,column:60}},"65":{start:{line:126,column:16},end:{line:126,column:59}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:38},end:{line:10,column:39}},loc:{start:{line:10,column:44},end:{line:127,column:1}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:11,column:11},end:{line:11,column:12}},loc:{start:{line:11,column:17},end:{line:11,column:46}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:16,column:15},end:{line:16,column:16}},loc:{start:{line:16,column:27},end:{line:94,column:5}},line:16},"3":{name:"(anonymous_3)",decl:{start:{line:96,column:64},end:{line:96,column:65}},loc:{start:{line:96,column:76},end:{line:106,column:5}},line:96},"4":{name:"(anonymous_4)",decl:{start:{line:103,column:31},end:{line:103,column:32}},loc:{start:{line:103,column:39},end:{line:103,column:70}},line:103},"5":{name:"(anonymous_5)",decl:{start:{line:126,column:10},end:{line:126,column:11}},loc:{start:{line:126,column:16},end:{line:126,column:59}},line:126}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"149f896237e959aef33a62e121d57ce12dda1441"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_2o8o3pdy23.s[0]++;require('dotenv').config();const{env:{TEST_DB_URL}}=(cov_2o8o3pdy23.s[1]++,process);const{expect}=(cov_2o8o3pdy23.s[2]++,require('chai'));const{random}=(cov_2o8o3pdy23.s[3]++,Math);const filterCandidates=(cov_2o8o3pdy23.s[4]++,require('.'));const{errors:{NotFoundError}}=(cov_2o8o3pdy23.s[5]++,require('affinity-util'));const{database,models:{User}}=(cov_2o8o3pdy23.s[6]++,require('affinity-data'));cov_2o8o3pdy23.s[7]++;describe('logic - filter candidates',()=>{cov_2o8o3pdy23.f[0]++;cov_2o8o3pdy23.s[8]++;before(()=>{cov_2o8o3pdy23.f[1]++;cov_2o8o3pdy23.s[9]++;return database.connect(TEST_DB_URL);});let name,surname,email,username,genderId,description,geometric,password,birthdate,location,coordinates,radius,insertions,userio;cov_2o8o3pdy23.s[10]++;beforeEach(async()=>{cov_2o8o3pdy23.f[2]++;cov_2o8o3pdy23.s[11]++;name=`namehongda-${random()}`;cov_2o8o3pdy23.s[12]++;surname=`surname-${random()}`;cov_2o8o3pdy23.s[13]++;email=`email-${random()}@mail.com`;cov_2o8o3pdy23.s[14]++;username=`username-${random()}`;cov_2o8o3pdy23.s[15]++;password=`password-${random()}`;cov_2o8o3pdy23.s[16]++;genderId=`genderId-${random()}`;cov_2o8o3pdy23.s[17]++;geometric=[{interest:`interest-${random()}`,value:random()},{interest:`interest-${random()}`,value:random()}];cov_2o8o3pdy23.s[18]++;description=`description-${random()}`;cov_2o8o3pdy23.s[19]++;birthdate=new Date();cov_2o8o3pdy23.s[20]++;radius=140;cov_2o8o3pdy23.s[21]++;coordinates=[41+random(),2+random()];cov_2o8o3pdy23.s[22]++;await User.deleteMany();const userio=(cov_2o8o3pdy23.s[23]++,await User.create({name,surname,email,username,genderId,description,geometric,password,birthdate,location:{type:"Point",coordinates:coordinates},radius}));cov_2o8o3pdy23.s[24]++;userio.id=userio._id.toString();cov_2o8o3pdy23.s[25]++;delete userio._id;cov_2o8o3pdy23.s[26]++;userIds=[];cov_2o8o3pdy23.s[27]++;names=[];cov_2o8o3pdy23.s[28]++;surnames=[];cov_2o8o3pdy23.s[29]++;emails=[];cov_2o8o3pdy23.s[30]++;usernames=[];cov_2o8o3pdy23.s[31]++;passwords=[];cov_2o8o3pdy23.s[32]++;genderIds=[];cov_2o8o3pdy23.s[33]++;geometrics=[];cov_2o8o3pdy23.s[34]++;descriptions=[];cov_2o8o3pdy23.s[35]++;birthdates=[];cov_2o8o3pdy23.s[36]++;locations=[];cov_2o8o3pdy23.s[37]++;radiuses=[];cov_2o8o3pdy23.s[38]++;insertions=[];cov_2o8o3pdy23.s[39]++;for(let i=(cov_2o8o3pdy23.s[40]++,0);i<20;i++){cov_2o8o3pdy23.s[41]++;coordinates=[41+random(),2+random()];const user=(cov_2o8o3pdy23.s[42]++,{name:`name-${random()}`,surname:`surname-${random()}`,email:`email-${random()}@mail.com`,username:`username-${random()}`,password:`password-${random()}`,genderId:`genderId-${random()}`,geometric:[{interest:`interest-${random()}`,value:random()},{interest:`interest-${random()}`,value:random()}],description:`description-${random()}`,birthdate:new Date(),location:{type:"Point",coordinates:coordinates},radius:4});cov_2o8o3pdy23.s[43]++;names.push(user.name);cov_2o8o3pdy23.s[44]++;surnames.push(user.surname);cov_2o8o3pdy23.s[45]++;emails.push(user.email);cov_2o8o3pdy23.s[46]++;usernames.push(user.username);cov_2o8o3pdy23.s[47]++;passwords.push(user.password);cov_2o8o3pdy23.s[48]++;genderIds.push(user.genderId);cov_2o8o3pdy23.s[49]++;geometrics.push(user.geometric);cov_2o8o3pdy23.s[50]++;descriptions.push(user.description);cov_2o8o3pdy23.s[51]++;birthdates.push(user.birthdate);cov_2o8o3pdy23.s[52]++;locations.push(user.location);cov_2o8o3pdy23.s[53]++;radiuses.push(user.radius);}cov_2o8o3pdy23.s[54]++;debugger;cov_2o8o3pdy23.s[55]++;await User.insertMany(insertions);// insertions.forEach(candidate => {
//     candidate.id = candidate._id.toString()
//     delete candidate._id
// })
});cov_2o8o3pdy23.s[56]++;it('should succeed on correct user and correct candidates',async()=>{cov_2o8o3pdy23.f[3]++;cov_2o8o3pdy23.s[57]++;debugger;const truecandidates=(cov_2o8o3pdy23.s[58]++,await filterCandidates(userio,insertions));cov_2o8o3pdy23.s[59]++;expect(truecandidates).to.exist;cov_2o8o3pdy23.s[60]++;expect(truecandidates).to.be.an('array');cov_2o8o3pdy23.s[61]++;expect(truecandidates).to.have.deep.members(insertions);cov_2o8o3pdy23.s[62]++;truecandidates.forEach(elem=>{cov_2o8o3pdy23.f[4]++;cov_2o8o3pdy23.s[63]++;return expect(elem).to.be.an('object');});// candidates.forEach(elem => expect(insertions).to.contain(elem))
});// it('should fail on wrong user id', async () => {
//     const id = '012345678901234567890123'
//     try {
//         await filterCandidates(user)
//         throw Error('should not reach this point')
//     } catch (error) {
//         expect(error).to.exist
//         expect(error).to.be.an.instanceOf(NotFoundError)
//         expect(error.message).to.equal(`user with id ${id} not found`)
//     }
// })
// TODO other cases
cov_2o8o3pdy23.s[64]++;after(()=>{cov_2o8o3pdy23.f[5]++;cov_2o8o3pdy23.s[65]++;return User.deleteMany().then(database.disconnect);});});