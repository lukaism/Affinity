var cov_2jx9k72fr2=function(){var path="/Users/LukaBontempi/bootcamp/collab/skylab-bootcamp-201909/staff/luka-bontempi/affinity/affinity-api/logic/filtercandidates/index.js";var hash="e894d67b88fc314795c100d5335288d81d791612";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/LukaBontempi/bootcamp/collab/skylab-bootcamp-201909/staff/luka-bontempi/affinity/affinity-api/logic/filtercandidates/index.js",statementMap:{"0":{start:{line:1,column:62},end:{line:1,column:86}},"1":{start:{line:2,column:39},end:{line:2,column:63}},"2":{start:{line:4,column:0},end:{line:15,column:1}},"3":{start:{line:5,column:21},end:{line:5,column:23}},"4":{start:{line:6,column:4},end:{line:12,column:6}},"5":{start:{line:7,column:8},end:{line:11,column:9}},"6":{start:{line:8,column:145},end:{line:8,column:154}},"7":{start:{line:9,column:12},end:{line:9,column:176}},"8":{start:{line:10,column:12},end:{line:10,column:38}},"9":{start:{line:13,column:4},end:{line:13,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:17},end:{line:4,column:18}},loc:{start:{line:4,column:45},end:{line:15,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:6,column:23},end:{line:6,column:24}},loc:{start:{line:6,column:36},end:{line:12,column:5}},line:6}},branchMap:{"0":{loc:{start:{line:7,column:8},end:{line:11,column:9}},type:"if",locations:[{start:{line:7,column:8},end:{line:11,column:9}},{start:{line:7,column:8},end:{line:11,column:9}}],line:7},"1":{loc:{start:{line:7,column:14},end:{line:7,column:132}},type:"binary-expr",locations:[{start:{line:7,column:14},end:{line:7,column:50}},{start:{line:7,column:54},end:{line:7,column:89}},{start:{line:7,column:93},end:{line:7,column:132}}],line:7}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"e894d67b88fc314795c100d5335288d81d791612"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{validate,errors:{NotFoundError,ContentError}}=(cov_2jx9k72fr2.s[0]++,require('affinity-util'));const{ObjectId,models:{User}}=(cov_2jx9k72fr2.s[1]++,require('affinity-data'));cov_2jx9k72fr2.s[2]++;module.exports=function(user,candidates){cov_2jx9k72fr2.f[0]++;let candodotes=(cov_2jx9k72fr2.s[3]++,[]);cov_2jx9k72fr2.s[4]++;candidates.forEach(candidate=>{cov_2jx9k72fr2.f[1]++;cov_2jx9k72fr2.s[5]++;if(!((cov_2jx9k72fr2.b[1][0]++,user.rejected.includes(candidate.id))&&(cov_2jx9k72fr2.b[1][1]++,user.aproved.includes(candidate.id))&&(cov_2jx9k72fr2.b[1][2]++,user.connections.includes(candidate.id)))){cov_2jx9k72fr2.b[0][0]++;const{name,surname,email,username,genderId,description,geometric,password,birthdate,location:{coordinates},radius}=(cov_2jx9k72fr2.s[6]++,candidate);cov_2jx9k72fr2.s[7]++;candidate={name,surname,email,username,genderId,description,geometric,password,birthdate,location:{type:"Point",coordinates:coordinates},radius};cov_2jx9k72fr2.s[8]++;candodotes.push(candidate);}else{cov_2jx9k72fr2.b[0][1]++;}});cov_2jx9k72fr2.s[9]++;return candodotes;};