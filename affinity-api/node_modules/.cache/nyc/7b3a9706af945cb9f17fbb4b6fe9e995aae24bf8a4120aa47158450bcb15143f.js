var cov_21h1uvl2ww=function(){var path="/Users/LukaBontempi/bootcamp/collab/skylab-bootcamp-201909/staff/luka-bontempi/affinity/affinity-api/logic/reject-candidate/index.spec.js";var hash="a836f9784e859437a97512030217b5aad1dd73d0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/LukaBontempi/bootcamp/collab/skylab-bootcamp-201909/staff/luka-bontempi/affinity/affinity-api/logic/reject-candidate/index.spec.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:26}},"1":{start:{line:2,column:33},end:{line:2,column:40}},"2":{start:{line:3,column:19},end:{line:3,column:34}},"3":{start:{line:4,column:19},end:{line:4,column:23}},"4":{start:{line:5,column:24},end:{line:5,column:36}},"5":{start:{line:6,column:38},end:{line:6,column:62}},"6":{start:{line:7,column:39},end:{line:7,column:63}},"7":{start:{line:9,column:0},end:{line:76,column:2}},"8":{start:{line:10,column:4},end:{line:10,column:47}},"9":{start:{line:10,column:17},end:{line:10,column:46}},"10":{start:{line:15,column:4},end:{line:46,column:6}},"11":{start:{line:16,column:8},end:{line:16,column:33}},"12":{start:{line:17,column:8},end:{line:17,column:39}},"13":{start:{line:18,column:8},end:{line:18,column:44}},"14":{start:{line:19,column:8},end:{line:19,column:41}},"15":{start:{line:20,column:8},end:{line:20,column:41}},"16":{start:{line:21,column:8},end:{line:21,column:41}},"17":{start:{line:22,column:8},end:{line:22,column:119}},"18":{start:{line:23,column:8},end:{line:23,column:47}},"19":{start:{line:24,column:8},end:{line:24,column:28}},"20":{start:{line:27,column:8},end:{line:27,column:34}},"21":{start:{line:28,column:8},end:{line:28,column:39}},"22":{start:{line:29,column:8},end:{line:29,column:45}},"23":{start:{line:30,column:8},end:{line:30,column:42}},"24":{start:{line:31,column:8},end:{line:31,column:42}},"25":{start:{line:32,column:8},end:{line:32,column:42}},"26":{start:{line:33,column:8},end:{line:33,column:120}},"27":{start:{line:34,column:8},end:{line:34,column:48}},"28":{start:{line:35,column:8},end:{line:35,column:29}},"29":{start:{line:38,column:8},end:{line:38,column:31}},"30":{start:{line:40,column:21},end:{line:40,column:129}},"31":{start:{line:42,column:22},end:{line:42,column:226}},"32":{start:{line:44,column:8},end:{line:44,column:20}},"33":{start:{line:45,column:8},end:{line:45,column:22}},"34":{start:{line:48,column:4},end:{line:56,column:6}},"35":{start:{line:49,column:21},end:{line:49,column:50}},"36":{start:{line:51,column:8},end:{line:51,column:29}},"37":{start:{line:52,column:8},end:{line:52,column:47}},"38":{start:{line:53,column:8},end:{line:53,column:50}},"39":{start:{line:54,column:8},end:{line:54,column:40}},"40":{start:{line:55,column:8},end:{line:55,column:57}},"41":{start:{line:75,column:4},end:{line:75,column:60}},"42":{start:{line:75,column:16},end:{line:75,column:59}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:37},end:{line:9,column:38}},loc:{start:{line:9,column:43},end:{line:76,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:11},end:{line:10,column:12}},loc:{start:{line:10,column:17},end:{line:10,column:46}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:15,column:16},end:{line:15,column:17}},loc:{start:{line:15,column:27},end:{line:46,column:5}},line:15},"3":{name:"(anonymous_3)",decl:{start:{line:48,column:44},end:{line:48,column:45}},loc:{start:{line:48,column:56},end:{line:56,column:5}},line:48},"4":{name:"(anonymous_4)",decl:{start:{line:75,column:10},end:{line:75,column:11}},loc:{start:{line:75,column:16},end:{line:75,column:59}},line:75}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"a836f9784e859437a97512030217b5aad1dd73d0"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_21h1uvl2ww.s[0]++;require('dotenv').config();const{env:{TEST_DB_URL}}=(cov_21h1uvl2ww.s[1]++,process);const{expect}=(cov_21h1uvl2ww.s[2]++,require('chai'));const{random}=(cov_21h1uvl2ww.s[3]++,Math);const rejectcandidate=(cov_21h1uvl2ww.s[4]++,require('.'));const{errors:{NotFoundError}}=(cov_21h1uvl2ww.s[5]++,require('affinity-util'));const{database,models:{User}}=(cov_21h1uvl2ww.s[6]++,require('affinity-data'));cov_21h1uvl2ww.s[7]++;describe('logic - reject-candidate',()=>{cov_21h1uvl2ww.f[0]++;cov_21h1uvl2ww.s[8]++;before(()=>{cov_21h1uvl2ww.f[1]++;cov_21h1uvl2ww.s[9]++;return database.connect(TEST_DB_URL);});let name,surname,email,username,genderId,description,geometric,password,birthdate,candidates,name1,surname1,email1,username1,genderId1,description1,geometric1,password1,birthdate1;cov_21h1uvl2ww.s[10]++;beforeEach(async()=>{cov_21h1uvl2ww.f[2]++;cov_21h1uvl2ww.s[11]++;name=`name-${random()}`;cov_21h1uvl2ww.s[12]++;surname=`surname-${random()}`;cov_21h1uvl2ww.s[13]++;email=`email-${random()}@mail.com`;cov_21h1uvl2ww.s[14]++;username=`username-${random()}`;cov_21h1uvl2ww.s[15]++;password=`password-${random()}`;cov_21h1uvl2ww.s[16]++;genderId=`genderId-${random()}`;cov_21h1uvl2ww.s[17]++;geometric=[{interest:`interest-${random()}`,value:random()},{interest:`interest-${random()}`,value:random()}];cov_21h1uvl2ww.s[18]++;description=`description-${random()}`;cov_21h1uvl2ww.s[19]++;birthdate=new Date();cov_21h1uvl2ww.s[20]++;name1=`name-${random()}`;cov_21h1uvl2ww.s[21]++;surname1=`surname-${random()}`;cov_21h1uvl2ww.s[22]++;email1=`email-${random()}@mail.com`;cov_21h1uvl2ww.s[23]++;username1=`username-${random()}`;cov_21h1uvl2ww.s[24]++;password1=`password-${random()}`;cov_21h1uvl2ww.s[25]++;genderId1=`genderId-${random()}`;cov_21h1uvl2ww.s[26]++;geometric1=[{interest:`interest-${random()}`,value:random()},{interest:`interest-${random()}`,value:random()}];cov_21h1uvl2ww.s[27]++;description1=`description-${random()}`;cov_21h1uvl2ww.s[28]++;birthdate1=new Date();cov_21h1uvl2ww.s[29]++;await User.deleteMany();const user=(cov_21h1uvl2ww.s[30]++,await User.create({name,surname,email,username,genderId,description,geometric,password,birthdate}));const user1=(cov_21h1uvl2ww.s[31]++,await User.create({name:name1,surname:surname1,email:email1,username:username1,genderId:genderId1,description:description1,geometric:geometric1,password:password1,birthdate:birthdate1}));cov_21h1uvl2ww.s[32]++;id=user.id;cov_21h1uvl2ww.s[33]++;id1=user1.id;});cov_21h1uvl2ww.s[34]++;it('should succeed on correct user id',async()=>{cov_21h1uvl2ww.f[3]++;const user=(cov_21h1uvl2ww.s[35]++,await rejectcandidate(id,id1));cov_21h1uvl2ww.s[36]++;expect(user).to.exist;cov_21h1uvl2ww.s[37]++;expect(user.rejected).to.be.an('array');cov_21h1uvl2ww.s[38]++;expect(user.rejected).to.deep.equal([id1]);cov_21h1uvl2ww.s[39]++;expect(user.lastAccess).to.exist;cov_21h1uvl2ww.s[40]++;expect(user.lastAccess).to.be.an.instanceOf(Date);});// it('should fail on wrong user id', async () => {
//     const id = '012345678901234567890123'
//     const id1 = '012345678901234567890124'
//     try {
//         await rejectcandidate(id,id1)
//         throw Error('should not reach this point')
//     } catch (error) {
//         expect(error).to.exist
//         expect(error).to.be.an.instanceOf(NotFoundError)
//         expect(error.message).to.equal(`user with id ${id} not found`)
//     }
// })
// TODO other cases
cov_21h1uvl2ww.s[41]++;after(()=>{cov_21h1uvl2ww.f[4]++;cov_21h1uvl2ww.s[42]++;return User.deleteMany().then(database.disconnect);});});